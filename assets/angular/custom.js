var Hitech = function (config) {    if (typeof config.scope !== typeof  undefined) {        this.scope(config.scope);    }    if (typeof config.grid !== typeof undefined) {        this.grid(config.grid);    }    if (typeof config.http !== typeof  undefined) {        this.http(config.http);    }    if (config.hasOwnProperty('gridId')) {        this._gridId = config.gridId;    } else {        this._gridId = 'mainGridOptions';    }}Hitech.prototype = {    number_format: function (number, decimals, dec_point, thousands_sep) {        number = (number + '').replace(/[^0-9+\-Ee.]/g, '');        var n = !isFinite(+number) ? 0 : +number,            prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),            sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,            dec = (typeof dec_point === 'undefined') ? '.' : dec_point,            s = '',            toFixedFix = function (n, prec) {                var k = Math.pow(10, prec);                return '' + (Math.round(n * k) / k)                        .toFixed(prec);            };        s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');        if (s[0].length > 3) {            s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);        }        if ((s[1] || '').length < prec) {            s[1] = s[1] || '';            s[1] += new Array(prec - s[1].length + 1).join('0');        }        return s.join(dec);    },    scope: function (scope) {        if (typeof scope == typeof undefined) {            return this._scope;        }        this._scope = scope;    },    grid: function (grid) {        if (typeof grid == typeof undefined) {            return this._grid;        }        this._grid = grid;    },    http: function (http) {        if (typeof http == typeof undefined) {            return this._http;        }        this._http = http;    },    request: function (config) {        var obj = this;        var first = config.first || config;        obj._http.setSub(first.sub);        obj._http.setQuery(first.query);        if (first.hasOwnProperty('requestType')) {            obj._http.setMethod(first.requestType);        } else {            if (first.hasOwnProperty(('method'))) {                obj._http.setMethod(first.method);            }        }        obj._http.makeRequest().then(function () {            var result = obj._http.getResults();            if (first.hasOwnProperty('complete')) {                if (typeof first.complete == 'function') {                    first.complete(result);                }            }            if (config.hasOwnProperty('second')) {                obj.request(config.second);            }        });    },    setGrid: function () {        if (!this._grid.hasOwnProperty('dataSource')) {            if (typeof this._scope.mainGridOptions !== typeof undefined) {                this._grid = this._scope.mainGridOptions;            }        }    },    applyFilter: function (config, operator) {        var opr = typeof operator !== typeof undefined ? operator : 'Contains';        this.setGrid();        var currFilterObj = this._grid.dataSource.filter();        var currentFilters = currFilterObj ? currFilterObj.filters : [];        if (currentFilters && currentFilters.length > 0) {            for (var i = 0; i < currentFilters.length; i++) {                if (currentFilters[i].field == config.field) {                    currentFilters.splice(i, 1);                    break;                }            }        }        if (config.value != "0") {            currentFilters.push({                field: config.field,                operator: opr,                value: config.value            });        }        this._grid.dataSource.filter({            logic: "and",            filters: currentFilters        });    },    clearFilters: function () {        this.setGrid();        this._grid.dataSource.filter({});    },    pageSize: function (size) {        this.setGrid();        this._grid.dataSource.pageSize(size);    },    omitSelected: function (selected, ids, prop) {        this.setGrid();        var dataSource = this._grid.dataSource, data = dataSource.data();        if (true == ids) {            var temp = [];            for (var i = 0, d; d = data[i]; i++) {                if (selected.indexOf(d[prop]) == -1) {                    temp.push(d);                }            }            data = temp;        } else {            for (var i = 0; i < selected.length; i++) {                data.splice(selected[i], 1);            }        }        data.sort();        dataSource.data(data);    },    keepSelected: function (selected) {        this.setGrid();        var dataSource = this._grid.dataSource, data = dataSource.data(), keep = [];        for (var i = 0; i < selected.length; i++) {            keep.push(data[selected[i]]);        }        dataSource.data(keep);    },    updateGridBySelection: function (selection) {        this.setGrid();        if (selection == null) {            return false;        }        var grid = $("#" + this._gridId).data('kendo-grid'),            selected_grid = grid.select(),            indexes = [];        for (var i = 0; i < selected_grid.length; i++) {            indexes.push($(selected_grid[i]).index());        }        if (indexes.length == 0) {            return false;        }        var ids = []        for (var i = 0; i < indexes.length; i++) {            var prop = this._grid.dataSource.data()[indexes[i]];            if (prop.hasOwnProperty('sn')) {                ids.push(prop.sn);            } else {                if (prop.hasOwnProperty('id')) {                    ids.push(prop.id);                } else {                    if (prop.hasOwnProperty('sno')) {                        ids.push(prop.sno);                    }                }            }        }        switch (selection.split(' ')[0].toLowerCase()) {            case 'omit':                this.omitSelected(indexes);                break;            case 'keep':                this.keepSelected(indexes);                break;            default :                return false;        }        return ids;    },    prepareDelete: function () {        this.setGrid();        var grid = $("#" + this._gridId).data('kendo-grid'),            selected_grid = grid.select(),            ids = [];        for (var i = 0; i < selected_grid.length; i++) {            data = grid.dataItem(selected_grid[i]);            if (data.hasOwnProperty('sn')) {                ids.push(data.sn);            } else {                if (data.hasOwnProperty('id')) {                    ids.push(data.id);                } else {                    if (data.hasOwnProperty('sno')) {                        ids.push(data.sno);                    }                }            }            //ids.push(data.sn);        }        ;        this._grid.selectedIds = ids;//ids = indexes of rows selected        return ids;    },    gridChangeEvent: function (obj, event) {        var items = obj.select();        var sel = [];        //find the index of checkbox in table row cell        var checkbox = 0, check;        var trs = $('tr[role=row]')[1];        var tds = $(trs).children('td');        for (var i = 0; i < tds.length; i++) {            if ($(tds[i]).find('.checkbox').length > 0) {                checkbox = i;                break;            }        }        //loop thru selected items        for (var i = 0, item; i < items.length; i++) {            item = items[i];            check = $(item).children('td')[checkbox];            $(check).find('.checkbox').prop('checked', true);            sel.push($(item).index());            if (this._scope.checked.indexOf($(item).index()) === -1) {                this._scope.checked.push($(item).index());            }        }        //uncheck the unselected items        var checked, tr;        for (var i = 0; this._scope.checked.length > i; i++) {            checked = this._scope.checked[i];            if (sel.indexOf(checked) === -1) {                tr = $('tr[role=row]')[checked + 1];                check = $(tr).children('td')[checkbox];                $(check).find('.checkbox').prop('checked', false);            }        }    },    gridDataBound: function (elemClass) {        $("." + elemClass).bind("change", function (e) {            $(e.target).closest("tr").toggleClass("k-state-selected");        });    }}function applyFilter(filterField, filterValue, grid) {    var gridData = grid;    var currFilterObj = gridData.dataSource.filter();    var currentFilters = currFilterObj ? currFilterObj.filters : [];    if (currentFilters && currentFilters.length > 0) {        for (var i = 0; i < currentFilters.length; i++) {            if (currentFilters[i].field == filterField) {                currentFilters.splice(i, 1);                break;            }        }    }    if (filterValue != "0") {        currentFilters.push({            field: filterField,            operator: 'Contains',            value: filterValue        });    }    gridData.dataSource.filter({        logic: "and",        filters: currentFilters    });}function clearFilters(grid) {    var gridData = grid;    gridData.dataSource.filter({});}function pageSize(size, grid) {    var dataSource = grid.dataSource;    dataSource.pageSize(size);}function omitSelected(grid, selected) {    var dataSource = grid.dataSource, data = dataSource.data();    for (var i = 0; i < selected.length; i++) {        data.splice(selected[i], 1);    }    dataSource.data(data);}function keepSelected(grid, selected) {    var dataSource = grid.dataSource, data = dataSource.data(), keep = [];    for (var i = 0; i < selected.length; i++) {        keep.push(data[i]);    }    dataSource.data(keep);}